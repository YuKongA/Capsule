<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/commonMain/kotlin/com/kyant/capsule/demo/MainContent.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/commonMain/kotlin/com/kyant/capsule/demo/MainContent.kt" />
              <option name="originalContent" value="package com.kyant.capsule.demo&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.gestures.detectTransformGestures&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.aspectRatio&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.safeDrawingPadding&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.BasicText&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableFloatStateOf&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.clipToBounds&#10;import androidx.compose.ui.draw.drawBehind&#10;import androidx.compose.ui.geometry.Offset&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.drawOutline&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import androidx.compose.ui.layout.layout&#10;import androidx.compose.ui.platform.LocalDensity&#10;import androidx.compose.ui.platform.LocalWindowInfo&#10;import androidx.compose.ui.unit.Constraints&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.util.fastCoerceAtLeast&#10;import androidx.compose.ui.util.fastRoundToInt&#10;import com.kyant.capsule.CapsuleShape&#10;import com.kyant.capsule.CornerSmoothness&#10;import com.kyant.capsule.G2RoundedCornerShape&#10;&#10;@Composable&#10;fun MainContent() {&#10;    Column(&#10;        Modifier&#10;            .safeDrawingPadding()&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(24.dp)&#10;    ) {&#10;        val maxRadius = with(LocalDensity.current) {&#10;            LocalWindowInfo.current.containerSize.width.toDp() / 2f - 16.dp&#10;        }&#10;&#10;        var showBaseline by remember { mutableStateOf(false) }&#10;&#10;        val radiusDp = remember { mutableFloatStateOf(64f) }&#10;        val circleFraction = remember { mutableFloatStateOf(CornerSmoothness.Default.circleFraction) }&#10;        val extendedFraction = remember { mutableFloatStateOf(CornerSmoothness.Default.extendedFraction) }&#10;&#10;        val aspectRatio = remember { mutableFloatStateOf(2f) }&#10;&#10;        var scale by remember { mutableFloatStateOf(1f) }&#10;        var offset by remember { mutableStateOf(Offset.Zero) }&#10;&#10;        BasicText(&quot;Drag to move, pinch to zoom&quot;)&#10;&#10;        Box(&#10;            Modifier&#10;                .weight(1f)&#10;                .align(Alignment.CenterHorizontally),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Box(&#10;                Modifier&#10;                    .padding(16.dp)&#10;                    .pointerInput(Unit) {&#10;                        detectTransformGestures { centroid, pan, zoom, rotation -&gt;&#10;                            scale = (scale * zoom).fastCoerceAtLeast(1f)&#10;                            offset += pan&#10;                        }&#10;                    }&#10;                    .background(Color.LightGray)&#10;                    .clipToBounds()&#10;                    .aspectRatio(1f)&#10;                    .graphicsLayer {&#10;                        translationX = offset.x&#10;                        translationY = offset.y&#10;                    }&#10;                    .graphicsLayer {&#10;                        scaleX = scale&#10;                        scaleY = scale&#10;                    }&#10;                    .drawBehind {&#10;                        if (showBaseline) {&#10;                            drawOutline(&#10;                                RoundedCornerShape(radiusDp.floatValue.dp)&#10;                                    .createOutline(size, layoutDirection, this),&#10;                                color = Color.Red&#10;                            )&#10;                        }&#10;&#10;                        drawOutline(&#10;                            G2RoundedCornerShape(&#10;                                radiusDp.floatValue.dp,&#10;                                CornerSmoothness(&#10;                                    circleFraction = circleFraction.floatValue,&#10;                                    extendedFraction = extendedFraction.floatValue&#10;                                )&#10;                            ).createOutline(size, layoutDirection, this),&#10;                            color = Color.Black&#10;                        )&#10;                    }&#10;                    .layout { measurable, constraints -&gt;&#10;                        val width = constraints.maxWidth&#10;                        val height = (width / aspectRatio.floatValue).fastRoundToInt()&#10;                        val placeable = measurable.measure(Constraints.fixed(width, height))&#10;&#10;                        layout(width, height) {&#10;                            placeable.place(0, 0)&#10;                        }&#10;                    }&#10;                    .fillMaxWidth()&#10;            )&#10;        }&#10;&#10;        Column(&#10;            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            Slider(&#10;                radiusDp,&#10;                0f..maxRadius.value,&#10;                &quot;Corner radius&quot;,&#10;                { it.toInt().toString() + &quot;dp&quot; },&#10;            )&#10;            Slider(&#10;                circleFraction,&#10;                0f..1f,&#10;                &quot;Circle fraction&quot;,&#10;                { (it * 100f).let { v -&gt; String.format(&quot;%.1f&quot;, v) } + &quot;%&quot; },&#10;            )&#10;            Slider(&#10;                extendedFraction,&#10;                0f..2f,&#10;                &quot;Extended fraction&quot;,&#10;                { (it * 100f).let { v -&gt; String.format(&quot;%.1f&quot;, v) } + &quot;%&quot; },&#10;            )&#10;            Slider(&#10;                aspectRatio,&#10;                1f..2f,&#10;                &quot;Aspect ratio&quot;,&#10;                { String.format(&quot;%.3f&quot;, it) },&#10;            )&#10;        }&#10;&#10;        Row(&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Box(&#10;                Modifier&#10;                    .clip(CapsuleShape)&#10;                    .background(Color(0xFF90CAF9))&#10;                    .clickable { showBaseline = !showBaseline }&#10;                    .height(40.dp)&#10;                    .padding(horizontal = 12.dp),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                BasicText(&#10;                    if (showBaseline) &quot;Hide baseline&quot;&#10;                    else &quot;Show baseline&quot;&#10;                )&#10;            }&#10;&#10;            Box(&#10;                Modifier&#10;                    .clip(CapsuleShape)&#10;                    .background(Color(0xFF90CAF9))&#10;                    .clickable {&#10;                        scale = 1f&#10;                        offset = Offset.Zero&#10;                    }&#10;                    .height(40.dp)&#10;                    .padding(horizontal = 12.dp),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                BasicText(&quot;Reset scale &amp; pos&quot;)&#10;            }&#10;&#10;            Box(&#10;                Modifier&#10;                    .clip(CapsuleShape)&#10;                    .background(Color(0xFF90CAF9))&#10;                    .clickable {&#10;                        radiusDp.floatValue = 64f&#10;                        circleFraction.floatValue = CornerSmoothness.Default.circleFraction&#10;                        extendedFraction.floatValue = CornerSmoothness.Default.extendedFraction&#10;                        aspectRatio.floatValue = 2f&#10;                        scale = 1f&#10;                        offset = Offset.Zero&#10;                    }&#10;                    .height(40.dp)&#10;                    .padding(horizontal = 12.dp),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                BasicText(&quot;Reset&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.kyant.capsule.demo&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.gestures.detectTransformGestures&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.aspectRatio&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.safeDrawingPadding&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.BasicText&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableFloatStateOf&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.clipToBounds&#10;import androidx.compose.ui.draw.drawBehind&#10;import androidx.compose.ui.geometry.Offset&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.drawOutline&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import androidx.compose.ui.layout.layout&#10;import androidx.compose.ui.platform.LocalDensity&#10;import androidx.compose.ui.platform.LocalWindowInfo&#10;import androidx.compose.ui.unit.Constraints&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.util.fastCoerceAtLeast&#10;import androidx.compose.ui.util.fastRoundToInt&#10;import com.kyant.capsule.CapsuleShape&#10;import com.kyant.capsule.CornerSmoothness&#10;import com.kyant.capsule.G2RoundedCornerShape&#10;&#10;@Composable&#10;fun MainContent() {&#10;    Column(&#10;        Modifier&#10;            .safeDrawingPadding()&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(24.dp)&#10;    ) {&#10;        val maxRadius = with(LocalDensity.current) {&#10;            LocalWindowInfo.current.containerSize.width.toDp() / 2f - 16.dp&#10;        }&#10;&#10;        var showBaseline by remember { mutableStateOf(false) }&#10;&#10;        val radiusDp = remember { mutableFloatStateOf(64f) }&#10;        val circleFraction = remember { mutableFloatStateOf(CornerSmoothness.Default.circleFraction) }&#10;        val extendedFraction = remember { mutableFloatStateOf(CornerSmoothness.Default.extendedFraction) }&#10;&#10;        val aspectRatio = remember { mutableFloatStateOf(2f) }&#10;&#10;        var scale by remember { mutableFloatStateOf(1f) }&#10;        var offset by remember { mutableStateOf(Offset.Zero) }&#10;&#10;        BasicText(&quot;Drag to move, pinch to zoom&quot;)&#10;&#10;        Box(&#10;            Modifier&#10;                .weight(1f)&#10;                .align(Alignment.CenterHorizontally),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Box(&#10;                Modifier&#10;                    .padding(16.dp)&#10;                    .pointerInput(Unit) {&#10;                        detectTransformGestures { centroid, pan, zoom, rotation -&gt;&#10;                            scale = (scale * zoom).fastCoerceAtLeast(1f)&#10;                            offset += pan&#10;                        }&#10;                    }&#10;                    .background(Color.LightGray)&#10;                    .clipToBounds()&#10;                    .aspectRatio(1f)&#10;                    .graphicsLayer {&#10;                        translationX = offset.x&#10;                        translationY = offset.y&#10;                    }&#10;                    .graphicsLayer {&#10;                        scaleX = scale&#10;                        scaleY = scale&#10;                    }&#10;                    .drawBehind {&#10;                        if (showBaseline) {&#10;                            drawOutline(&#10;                                RoundedCornerShape(radiusDp.floatValue.dp)&#10;                                    .createOutline(size, layoutDirection, this),&#10;                                color = Color.Red&#10;                            )&#10;                        }&#10;&#10;                        drawOutline(&#10;                            G2RoundedCornerShape(&#10;                                radiusDp.floatValue.dp,&#10;                                CornerSmoothness(&#10;                                    circleFraction = circleFraction.floatValue,&#10;                                    extendedFraction = extendedFraction.floatValue&#10;                                )&#10;                            ).createOutline(size, layoutDirection, this),&#10;                            color = Color.Black&#10;                        )&#10;                    }&#10;                    .layout { measurable, constraints -&gt;&#10;                        val width = constraints.maxWidth&#10;                        val height = (width / aspectRatio.floatValue).fastRoundToInt()&#10;                        val placeable = measurable.measure(Constraints.fixed(width, height))&#10;&#10;                        layout(width, height) {&#10;                            placeable.place(0, 0)&#10;                        }&#10;                    }&#10;                    .fillMaxWidth()&#10;            )&#10;        }&#10;&#10;        Column(&#10;            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            Slider(&#10;                radiusDp,&#10;                0f..maxRadius.value,&#10;                &quot;Corner radius&quot;,&#10;                { it.toInt().toString() + &quot;dp&quot; },&#10;            )&#10;            Slider(&#10;                circleFraction,&#10;                0f..1f,&#10;                &quot;Circle fraction&quot;,&#10;                { (it * 100f).let { v -&gt; ((v * 10).toInt() / 10.0).toString() } + &quot;%&quot; },&#10;            )&#10;            Slider(&#10;                extendedFraction,&#10;                0f..2f,&#10;                &quot;Extended fraction&quot;,&#10;                { (it * 100f).let { v -&gt; ((v * 10).toInt() / 10.0).toString() } + &quot;%&quot; },&#10;            )&#10;            Slider(&#10;                aspectRatio,&#10;                1f..2f,&#10;                &quot;Aspect ratio&quot;,&#10;                { ((it * 1000).toInt() / 1000.0).toString() },&#10;            )&#10;        }&#10;&#10;        Row(&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Box(&#10;                Modifier&#10;                    .clip(CapsuleShape)&#10;                    .background(Color(0xFF90CAF9))&#10;                    .clickable { showBaseline = !showBaseline }&#10;                    .height(40.dp)&#10;                    .padding(horizontal = 12.dp),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                BasicText(&#10;                    if (showBaseline) &quot;Hide baseline&quot;&#10;                    else &quot;Show baseline&quot;&#10;                )&#10;            }&#10;&#10;            Box(&#10;                Modifier&#10;                    .clip(CapsuleShape)&#10;                    .background(Color(0xFF90CAF9))&#10;                    .clickable {&#10;                        scale = 1f&#10;                        offset = Offset.Zero&#10;                    }&#10;                    .height(40.dp)&#10;                    .padding(horizontal = 12.dp),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                BasicText(&quot;Reset scale &amp; pos&quot;)&#10;            }&#10;&#10;            Box(&#10;                Modifier&#10;                    .clip(CapsuleShape)&#10;                    .background(Color(0xFF90CAF9))&#10;                    .clickable {&#10;                        radiusDp.floatValue = 64f&#10;                        circleFraction.floatValue = CornerSmoothness.Default.circleFraction&#10;                        extendedFraction.floatValue = CornerSmoothness.Default.extendedFraction&#10;                        aspectRatio.floatValue = 2f&#10;                        scale = 1f&#10;                        offset = Offset.Zero&#10;                    }&#10;                    .height(40.dp)&#10;                    .padding(horizontal = 12.dp),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                BasicText(&quot;Reset&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>